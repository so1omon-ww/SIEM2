#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
"""

import subprocess
import sys
import os
import time
import signal
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

def start_agent(agent_type: str, config_file: str = None):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≥–µ–Ω—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
    agents_dir = Path(__file__).parent.parent / "agents" / "python"
    
    if agent_type == "windows":
        script_path = agents_dir / "windows_agent.py"
        config_file = config_file or agents_dir / "secagent.example.yaml"
    elif agent_type == "privileged":
        script_path = agents_dir / "privileged_agent.py"
        config_file = config_file or agents_dir / "config.yaml"
    else:
        script_path = agents_dir / "agent.py"
        config_file = config_file or agents_dir / "config.yaml"
    
    if not script_path.exists():
        print(f"‚ùå –ê–≥–µ–Ω—Ç {agent_type} –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}")
        return None
    
    if not config_file or not Path(config_file).exists():
        print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_file}")
        return None
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env = os.environ.copy()
    env["SERVER_URL"] = "http://localhost:8000"
    env["API_KEY"] = "690023318602ee078fb6d5cbe2a17f8bd5d99a8e4899d8765c5ad23828938beb"
    
    try:
        print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç {agent_type}...")
        print(f"   –°–∫—Ä–∏–ø—Ç: {script_path}")
        print(f"   –ö–æ–Ω—Ñ–∏–≥: {config_file}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç
        process = subprocess.Popen(
            [sys.executable, str(script_path)],
            cwd=str(agents_dir),
            env=env,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        print(f"‚úÖ –ê–≥–µ–Ω—Ç {agent_type} –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
        return process
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞ {agent_type}: {e}")
        return None

def stop_agent(process):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≥–µ–Ω—Ç"""
    if process and process.poll() is None:
        try:
            process.terminate()
            process.wait(timeout=5)
            print(f"‚úÖ –ê–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except subprocess.TimeoutExpired:
            process.kill()
            print(f"‚ö†Ô∏è –ê–≥–µ–Ω—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≥–µ–Ω—Ç–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üõ°Ô∏è SIEM System - –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
    try:
        import requests
        headers = {"X-API-Key": "690023318602ee078fb6d5cbe2a17f8bd5d99a8e4899d8765c5ad23828938beb"}
        response = requests.get("http://localhost:8000/api/dashboard/stats", headers=headers, timeout=5)
        if response.status_code != 200:
            print("‚ùå –°–µ—Ä–≤–µ—Ä SIEM –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose -f infra/docker/docker-compose.yml up -d")
            return
    except Exception as e:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É SIEM")
        print(f"   –û—à–∏–±–∫–∞: {e}")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose -f infra/docker/docker-compose.yml up -d")
        return
    
    print("‚úÖ –°–µ—Ä–≤–µ—Ä SIEM –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    agents_to_start = [
        ("windows", "Windows Agent"),
        ("privileged", "Privileged Agent")
    ]
    
    processes = []
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤
        for agent_type, agent_name in agents_to_start:
            process = start_agent(agent_type)
            if process:
                processes.append((agent_type, process))
                time.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
        
        if not processes:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞")
            return
        
        print(f"\n‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(processes)}")
        print("üìä –ê–≥–µ–Ω—Ç—ã –Ω–∞—á–∞–ª–∏ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö...")
        print("\n–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø—Ä–æ—Ü–µ—Å—Å—ã
        while True:
            time.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –µ—â–µ —Ä–∞–±–æ—Ç–∞—é—Ç
            active_processes = []
            for agent_type, process in processes:
                if process.poll() is None:
                    active_processes.append((agent_type, process))
                else:
                    print(f"‚ö†Ô∏è –ê–≥–µ–Ω—Ç {agent_type} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è (–∫–æ–¥: {process.returncode})")
            
            processes = active_processes
            
            if not processes:
                print("‚ùå –í—Å–µ –∞–≥–µ–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å")
                break
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            try:
                headers = {"X-API-Key": "690023318602ee078fb6d5cbe2a17f8bd5d99a8e4899d8765c5ad23828938beb"}
                response = requests.get("http://localhost:8000/api/dashboard/stats", headers=headers, timeout=5)
                if response.status_code == 200:
                    stats = response.json()
                    print(f"üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {stats.get('activeEvents', 0)}")
            except:
                pass
    
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
        print("\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤...")
        for agent_type, process in processes:
            print(f"   –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {agent_type}...")
            stop_agent(process)
        
        print("‚úÖ –í—Å–µ –∞–≥–µ–Ω—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

if __name__ == "__main__":
    main()
