#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SIEM Analyzer
"""

import asyncio
import aiohttp
import json
import sys
import time
from datetime import datetime
from typing import Dict, List, Any


class AnalyzerTester:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.session = None
        self.test_results = []
        
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    def log_test(self, test_name: str, success: bool, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        status = "[OK] PASS" if success else "[ERROR] FAIL"
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {status} {test_name}")
        if details:
            print(f"    {details}")
        
        self.test_results.append({
            "test": test_name,
            "success": success,
            "details": details,
            "timestamp": timestamp
        })
    
    async def test_analyzer_lifecycle(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
        
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            status = await self.get_status()
            initial_status = status.get('is_integrated', False)
            self.log_test("–ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å", True, f"–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä {'–∑–∞–ø—É—â–µ–Ω' if initial_status else '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
            
            # 2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
            start_result = await self.start_analyzer()
            if start_result.get('status') in ['starting', 'running']:
                self.log_test("–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞", True, start_result.get('message', ''))
            else:
                self.log_test("–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞", False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {start_result}")
                return False
            
            # 3. –ü–æ–¥–æ–∂–¥–∞—Ç—å –∑–∞–ø—É—Å–∫–∞
            print("    ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
            await asyncio.sleep(5)
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
            status = await self.get_status()
            if status.get('is_integrated', False):
                self.log_test("–°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞", True, "–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            else:
                self.log_test("–°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞", False, "–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
                return False
            
            # 5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ
            health = await self.health_check()
            if health.get('status') == 'healthy':
                self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è", True, "–°–∏—Å—Ç–µ–º–∞ –∑–¥–æ—Ä–æ–≤–∞")
            else:
                self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è", False, f"–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è: {health.get('status')}")
            
            # 6. –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞
            rules = await self.get_rules()
            total_rules = rules.get('total_rules', 0)
            if total_rules > 0:
                self.log_test("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤–∏–ª", True, f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {total_rules} –ø—Ä–∞–≤–∏–ª")
            else:
                self.log_test("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤–∏–ª", False, "–ü—Ä–∞–≤–∏–ª–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            
            # 7. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π
            event_test_success = await self.test_event_processing()
            
            # 8. –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await self.get_stats()
            processed_count = stats.get('analyzer_stats', {}).get('processed_events_count', 0)
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", True, f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} —Å–æ–±—ã—Ç–∏–π")
            
            # 9. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
            stop_result = await self.stop_analyzer()
            if stop_result.get('status') == 'stopped':
                self.log_test("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞", True, stop_result.get('message', ''))
            else:
                self.log_test("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞", False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {stop_result}")
            
            print("[OK] –¢–µ—Å—Ç –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            return True
            
        except Exception as e:
            self.log_test("–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    async def test_event_processing(self) -> bool:
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π...")
        
        try:
            test_events = [
                # –°–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                {
                    "event_type": "net.connection",
                    "src_ip": "192.168.1.100",
                    "dst_ip": "192.168.1.1",
                    "timestamp": datetime.utcnow().isoformat(),
                    "host_id": "test-host",
                    "details": {"src_port": 12345, "dst_port": 80, "protocol": "tcp"}
                },
                # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                {
                    "event_type": "auth.failure",
                    "src_ip": "10.0.0.50",
                    "timestamp": datetime.utcnow().isoformat(),
                    "host_id": "test-host",
                    "details": {"username": "admin", "reason": "invalid_password"}
                },
                # –ü—Ä–æ—Ü–µ—Å—Å
                {
                    "event_type": "process.start",
                    "src_ip": "192.168.1.100",
                    "timestamp": datetime.utcnow().isoformat(),
                    "host_id": "test-host",
                    "details": {"process_name": "cmd.exe", "pid": 1234}
                }
            ]
            
            success_count = 0
            for i, event in enumerate(test_events, 1):
                print(f"  üìù –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–±—ã—Ç–∏–µ {i}: {event['event_type']}")
                try:
                    result = await self.process_event(event)
                    results_count = result.get('results_count', 0)
                    if result.get('event_processed', False):
                        self.log_test(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è {i}", True, f"{results_count} –ø—Ä–∞–≤–∏–ª —Å—Ä–∞–±–æ—Ç–∞–ª–æ")
                        success_count += 1
                    else:
                        self.log_test(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è {i}", False, "–°–æ–±—ã—Ç–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                except Exception as e:
                    self.log_test(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è {i}", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            
            overall_success = success_count == len(test_events)
            self.log_test("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π", overall_success, f"{success_count}/{len(test_events)} —Å–æ–±—ã—Ç–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            return overall_success
            
        except Exception as e:
            self.log_test("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    async def test_threshold_rules(self) -> bool:
        """–¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª –ø–æ—Ä–æ–≥–∞"""
        print("\n[STATS] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –ø–æ—Ä–æ–≥–∞...")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –ø–æ—Ä–æ–≥–∞
            threshold_reached = False
            for i in range(15):
                event = {
                    "event_type": "auth.failure",
                    "src_ip": "10.0.0.50",
                    "timestamp": datetime.utcnow().isoformat(),
                    "host_id": "test-host",
                    "details": {"username": "admin", "reason": "invalid_password"}
                }
                
                try:
                    result = await self.process_event(event)
                    if result.get('results_count', 0) > 0:
                        self.log_test("–ü—Ä–∞–≤–∏–ª–∞ –ø–æ—Ä–æ–≥–∞", True, f"–ü–æ—Ä–æ–≥ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Å–ª–µ {i+1} —Å–æ–±—ã—Ç–∏–π")
                        threshold_reached = True
                        break
                except Exception as e:
                    print(f"    [WARNING] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è {i+1}: {e}")
                    continue
            
            if not threshold_reached:
                self.log_test("–ü—Ä–∞–≤–∏–ª–∞ –ø–æ—Ä–æ–≥–∞", False, "–ü–æ—Ä–æ–≥ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Å–ª–µ 15 —Å–æ–±—ã—Ç–∏–π")
            
            await asyncio.sleep(2)  # –î–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
            return threshold_reached
            
        except Exception as e:
            self.log_test("–ü—Ä–∞–≤–∏–ª–∞ –ø–æ—Ä–æ–≥–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    async def test_correlation(self) -> bool:
        """–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π"""
        print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏...")
        
        try:
            # –°–æ–∑–¥–∞—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            events = [
                {"event_type": "net.connection", "src_ip": "192.168.1.100", "dst_ip": "192.168.1.1"},
                {"event_type": "auth.success", "src_ip": "192.168.1.100"},
                {"event_type": "process.start", "src_ip": "192.168.1.100"}
            ]
            
            success_count = 0
            for event in events:
                event.update({
                    "timestamp": datetime.utcnow().isoformat(),
                    "host_id": "test-host"
                })
                try:
                    result = await self.process_event(event)
                    if result.get('event_processed', False):
                        success_count += 1
                except Exception as e:
                    print(f"    [WARNING] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è: {e}")
            
            self.log_test("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏", success_count == len(events), 
                         f"{success_count}/{len(events)} —Å–æ–±—ã—Ç–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
            await asyncio.sleep(5)  # –î–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            try:
                stats = await self.get_stats()
                cache_size = stats.get('analyzer_stats', {}).get('event_cache_size', 0)
                self.log_test("–ö–µ—à —Å–æ–±—ã—Ç–∏–π", True, f"–°–æ–±—ã—Ç–∏–π –≤ –∫–µ—à–µ: {cache_size}")
                return True
            except Exception as e:
                self.log_test("–ö–µ—à —Å–æ–±—ã—Ç–∏–π", False, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                return False
            
        except Exception as e:
            self.log_test("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    async def test_api_endpoints(self) -> bool:
        """–¢–µ—Å—Ç –≤—Å–µ—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
        print("\n[NET] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
        
        try:
            endpoints = [
                ("GET", "/analyzer/status", "–°—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"),
                ("GET", "/analyzer/health", "–ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã"),
                ("GET", "/analyzer/config", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"),
                ("GET", "/analyzer/stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                ("GET", "/health", "–û–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ"),
                ("GET", "/", "–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç")
            ]
            
            success_count = 0
            for method, endpoint, description in endpoints:
                try:
                    if method == "GET":
                        async with self.session.get(f"{self.base_url}{endpoint}") as resp:
                            if resp.status == 200:
                                self.log_test(f"API {description}", True, f"–°—Ç–∞—Ç—É—Å: {resp.status}")
                                success_count += 1
                            else:
                                self.log_test(f"API {description}", False, f"–°—Ç–∞—Ç—É—Å: {resp.status}")
                    else:
                        # –î–ª—è –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É
                        pass
                except Exception as e:
                    self.log_test(f"API {description}", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            
            overall_success = success_count == len(endpoints)
            self.log_test("API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã", overall_success, f"{success_count}/{len(endpoints)} —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
            return overall_success
            
        except Exception as e:
            self.log_test("API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    # API –º–µ—Ç–æ–¥—ã
    async def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        async with self.session.get(f"{self.base_url}/analyzer/status") as resp:
            return await resp.json()
    
    async def start_analyzer(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä"""
        async with self.session.post(f"{self.base_url}/analyzer/start") as resp:
            return await resp.json()
    
    async def stop_analyzer(self) -> Dict[str, Any]:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä"""
        async with self.session.post(f"{self.base_url}/analyzer/stop") as resp:
            return await resp.json()
    
    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã"""
        async with self.session.get(f"{self.base_url}/analyzer/health") as resp:
            return await resp.json()
    
    async def get_rules(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª"""
        async with self.session.get(f"{self.base_url}/analyzer/rules") as resp:
            return await resp.json()
    
    async def process_event(self, event: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ"""
        async with self.session.post(f"{self.base_url}/analyzer/events/process", 
                                   json=event) as resp:
            return await resp.json()
    
    async def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        async with self.session.get(f"{self.base_url}/analyzer/stats") as resp:
            return await resp.json()
    
    def print_summary(self):
        """–í—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\n" + "="*60)
        print("[STATS] –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*60)
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results if result['success'])
        failed_tests = total_tests - passed_tests
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"[OK] –£—Å–ø–µ—à–Ω–æ: {passed_tests}")
        print(f"[ERROR] –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests/total_tests)*100:.1f}%")
        
        if failed_tests > 0:
            print("\n[ERROR] –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´:")
            for result in self.test_results:
                if not result['success']:
                    print(f"  - {result['test']}: {result['details']}")
        
        print("\n" + "="*60)
        
        return failed_tests == 0


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("[START] –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SIEM Analyzer...")
    print(f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    base_url = "http://localhost:8000"
    if len(sys.argv) > 1:
        base_url = sys.argv[1]
    
    print(f"[NET] –¢–µ—Å—Ç–∏—Ä—É—é API –ø–æ –∞–¥—Ä–µ—Å—É: {base_url}")
    
    async with AnalyzerTester(base_url) as tester:
        # –¢–µ—Å—Ç 1: API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        await tester.test_api_endpoints()
        
        # –¢–µ—Å—Ç 2: –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
        await tester.test_analyzer_lifecycle()
        
        # –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
        await tester.test_event_processing()
        
        # –¢–µ—Å—Ç 4: –ü—Ä–∞–≤–∏–ª–∞ –ø–æ—Ä–æ–≥–∞
        await tester.test_threshold_rules()
        
        # –¢–µ—Å—Ç 5: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è
        await tester.test_correlation()
    
    # –í—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–¥–∫—É
    all_tests_passed = tester.print_summary()
    
    if all_tests_passed:
        print("[SUCCESS] –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("üí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å!")
        return 1


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n[WARNING] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
