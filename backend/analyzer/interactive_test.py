1#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SIEM Analyzer
"""

import asyncio
import json
import sys
from datetime import datetime
from typing import Dict, List, Any


class InteractiveAnalyzerTester:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    
    def __init__(self):
        self.test_history = []
    
    def log_action(self, action: str, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {action}")
        if details:
            print(f"    {details}")
        
        self.test_history.append({
            "action": action,
            "details": details,
            "timestamp": timestamp
        })
    
    def print_menu(self):
        """–í—ã–≤–µ—Å—Ç–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        print("\n" + "="*60)
        print("üéÆ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SIEM ANALYZER")
        print("="*60)
        print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1.  [STATS] –°—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞")
        print("2.  [START] –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä")
        print("3.  [STOP] –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä")
        print("4.  üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä")
        print("5.  üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ")
        print("6.  üì¶ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞–∫–µ—Ç —Å–æ–±—ã—Ç–∏–π")
        print("7.  üìã –°–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª")
        print("8.  üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        print("9.  [HEALTH] –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ")
        print("10. [CONFIG] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        print("11. üß™ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã")
        print("12. üìö –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π")
        print("13. üÜò –ü–æ–º–æ—â—å")
        print("0.  üö™ –í—ã—Ö–æ–¥")
        print("="*60)
    
    def print_help(self):
        """–í—ã–≤–µ—Å—Ç–∏ —Å–ø—Ä–∞–≤–∫—É"""
        print("\nüìö –°–ü–†–ê–í–ö–ê –ü–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ")
        print("="*40)
        print("üéØ –¶–µ–ª—å: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞")
        print("\nüìã –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
        print("‚Ä¢ –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª (–∑–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞)")
        print("‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π")
        print("‚Ä¢ –ü—Ä–∞–≤–∏–ª–∞ –ø–æ—Ä–æ–≥–∞")
        print("‚Ä¢ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å–æ–±—ã—Ç–∏–π")
        print("‚Ä¢ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã")
        print("\n[CONFIG] –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ—Ä—è–¥–æ–∫:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä")
        print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏ –∑–¥–æ—Ä–æ–≤—å–µ")
        print("3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è")
        print("4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        print("5. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä")
        print("\nüí° –°–æ–≤–µ—Ç—ã:")
        print("‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤")
        print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–æ–≥–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö")
        print("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π")
        print("‚Ä¢ –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ—Ä–æ–≥–∞")
    
    async def get_analyzer_status(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            status = {
                "is_integrated": True,
                "integration_start_time": datetime.now().isoformat(),
                "analyzer_status": {
                    "is_running": True,
                    "processed_events_count": 42,
                    "triggered_rules_count": 15,
                    "generated_alerts_count": 8
                }
            }
            
            print("\n[STATS] –°–¢–ê–¢–£–° –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê")
            print("="*30)
            print(f"–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω: {'[OK] –î–∞' if status['is_integrated'] else '[ERROR] –ù–µ—Ç'}")
            if status['is_integrated']:
                print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {status['integration_start_time']}")
                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: {status['analyzer_status']['processed_events_count']}")
                print(f"–°—Ä–∞–±–æ—Ç–∞–ª–æ –ø—Ä–∞–≤–∏–ª: {status['analyzer_status']['triggered_rules_count']}")
                print(f"–°–æ–∑–¥–∞–Ω–æ –∞–ª–µ—Ä—Ç–æ–≤: {status['analyzer_status']['generated_alerts_count']}")
            
            self.log_action("–ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞", "–£—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            self.log_action("–ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞", f"–û—à–∏–±–∫–∞: {e}")
    
    async def start_analyzer(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä"""
        try:
            print("\n[START] –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê")
            print("="*25)
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞
            print("‚è≥ –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä...")
            await asyncio.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
            
            print("[OK] –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            print("[STATS] –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã:")
            print("  ‚Ä¢ –î–≤–∏–∂–æ–∫ –ø—Ä–∞–≤–∏–ª")
            print("  ‚Ä¢ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å–æ–±—ã—Ç–∏–π")
            print("  ‚Ä¢ –ê–Ω–∞–ª–∏–∑ —É–≥—Ä–æ–∑")
            print("  ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            print("  ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞–º–∏")
            
            self.log_action("–ó–∞–ø—É—â–µ–Ω –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä", "–£—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            self.log_action("–ó–∞–ø—É—â–µ–Ω –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä", f"–û—à–∏–±–∫–∞: {e}")
    
    async def stop_analyzer(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä"""
        try:
            print("\n[STOP] –û–°–¢–ê–ù–û–í–ö–ê –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê")
            print("="*25)
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            print("‚è≥ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä...")
            await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            
            print("[OK] –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            print("[STATS] –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:")
            print("  ‚Ä¢ –î–≤–∏–∂–æ–∫ –ø—Ä–∞–≤–∏–ª")
            print("  ‚Ä¢ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å–æ–±—ã—Ç–∏–π")
            print("  ‚Ä¢ –ê–Ω–∞–ª–∏–∑ —É–≥—Ä–æ–∑")
            print("  ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            print("  ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞–º–∏")
            
            self.log_action("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä", "–£—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            self.log_action("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä", f"–û—à–∏–±–∫–∞: {e}")
    
    async def restart_analyzer(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä"""
        try:
            print("\nüîÑ –ü–ï–†–ï–ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê")
            print("="*25)
            
            print("‚è≥ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä...")
            await asyncio.sleep(1)
            
            print("‚è≥ –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä...")
            await asyncio.sleep(2)
            
            print("[OK] –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!")
            
            self.log_action("–ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä", "–£—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
            self.log_action("–ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä", f"–û—à–∏–±–∫–∞: {e}")
    
    async def send_test_event(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ"""
        try:
            print("\nüìù –û–¢–ü–†–ê–í–ö–ê –¢–ï–°–¢–û–í–û–ì–û –°–û–ë–´–¢–ò–Ø")
            print("="*30)
            
            # –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–±—ã—Ç–∏—è
            print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è:")
            print("1. net.connection - —Å–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            print("2. auth.failure - –Ω–µ—É–¥–∞—á–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
            print("3. process.start - –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞")
            print("4. custom - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ")
            
            choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-4): ").strip()
            
            event_types = {
                "1": "net.connection",
                "2": "auth.failure", 
                "3": "process.start",
                "4": "custom"
            }
            
            event_type = event_types.get(choice, "net.connection")
            
            if choice == "4":
                event_type = input("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: ").strip() or "custom.event"
            
            src_ip = input("IP –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (192.168.1.100): ").strip() or "192.168.1.100"
            dst_ip = input("IP –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (192.168.1.1): ").strip() or "192.168.1.1"
            
            # –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
            event = {
                "event_type": event_type,
                "src_ip": src_ip,
                "dst_ip": dst_ip,
                "timestamp": datetime.now().isoformat(),
                "host_id": "interactive-test",
                "details": {
                    "test": True,
                    "interactive": True,
                    "user_input": True
                }
            }
            
            # –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
            if event_type == "net.connection":
                event["details"].update({
                    "src_port": 12345,
                    "dst_port": 80,
                    "protocol": "tcp"
                })
            elif event_type == "auth.failure":
                event["details"].update({
                    "username": "admin",
                    "reason": "invalid_password"
                })
            elif event_type == "process.start":
                event["details"].update({
                    "process_name": "cmd.exe",
                    "pid": 1234
                })
            
            print(f"\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–±—ã—Ç–∏–µ: {event_type}")
            print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {src_ip}")
            print(f"   –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {dst_ip}")
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
            await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            
            print("[OK] –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            print("[STATS] –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è:")
            print(json.dumps(event, indent=2, ensure_ascii=False))
            
            self.log_action("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ", f"–¢–∏–ø: {event_type}")
            
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
            self.log_action("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ", f"–û—à–∏–±–∫–∞: {e}")
    
    async def send_events_batch(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞–∫–µ—Ç —Å–æ–±—ã—Ç–∏–π"""
        try:
            print("\nüì¶ –û–¢–ü–†–ê–í–ö–ê –ü–ê–ö–ï–¢–ê –°–û–ë–´–¢–ò–ô")
            print("="*30)
            
            count = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π (1-20): ").strip()
            try:
                count = int(count) if count else 5
                count = max(1, min(20, count))  # –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω
            except ValueError:
                count = 5
            
            event_type = input("–¢–∏–ø —Å–æ–±—ã—Ç–∏–π (net.connection): ").strip() or "net.connection"
            
            print(f"\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è—é {count} —Å–æ–±—ã—Ç–∏–π —Ç–∏–ø–∞ {event_type}...")
            
            events = []
            for i in range(count):
                event = {
                    "event_type": event_type,
                    "src_ip": f"192.168.1.{100 + i}",
                    "dst_ip": "192.168.1.1",
                    "timestamp": datetime.now().isoformat(),
                    "host_id": "batch-test",
                    "details": {
                        "batch_id": i,
                        "test": True,
                        "batch_size": count
                    }
                }
                
                if event_type == "net.connection":
                    event["details"].update({
                        "src_port": 12345 + i,
                        "dst_port": 80,
                        "protocol": "tcp"
                    })
                
                events.append(event)
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞–∫–µ—Ç–∞
            await asyncio.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            
            print("[OK] –ü–∞–∫–µ—Ç —Å–æ–±—ã—Ç–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            print(f"[STATS] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {len(events)} —Å–æ–±—ã—Ç–∏–π")
            print(f"   –¢–∏–ø: {event_type}")
            print(f"   –î–∏–∞–ø–∞–∑–æ–Ω IP: 192.168.1.100 - 192.168.1.{100 + count - 1}")
            
            self.log_action("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–∞–∫–µ—Ç —Å–æ–±—ã—Ç–∏–π", f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}, —Ç–∏–ø: {event_type}")
            
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞–∫–µ—Ç–∞: {e}")
            self.log_action("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–∞–∫–µ—Ç —Å–æ–±—ã—Ç–∏–π", f"–û—à–∏–±–∫–∞: {e}")
    
    async def list_rules(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª"""
        try:
            print("\nüìã –°–ü–ò–°–û–ö –ü–†–ê–í–ò–õ –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê")
            print("="*35)
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            rules = [
                {"name": "port_scan_detection", "type": "threshold", "severity": "medium", "enabled": True},
                {"name": "brute_force_detection", "type": "threshold", "severity": "high", "enabled": True},
                {"name": "lateral_movement_detection", "type": "correlation", "severity": "high", "enabled": True},
                {"name": "network_anomaly_detection", "type": "anomaly", "severity": "medium", "enabled": True},
                {"name": "critical_process_detection", "type": "immediate", "severity": "critical", "enabled": True}
            ]
            
            print(f"–í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª: {len(rules)}")
            print("\nüìã –î–µ—Ç–∞–ª–∏ –ø—Ä–∞–≤–∏–ª:")
            for i, rule in enumerate(rules, 1):
                status = "[OK]" if rule["enabled"] else "[ERROR]"
                print(f"{i}. {status} {rule['name']}")
                print(f"   –¢–∏–ø: {rule['type']}")
                print(f"   –í–∞–∂–Ω–æ—Å—Ç—å: {rule['severity']}")
                print(f"   –°—Ç–∞—Ç—É—Å: {'–í–∫–ª—é—á–µ–Ω–æ' if rule['enabled'] else '–û—Ç–∫–ª—é—á–µ–Ω–æ'}")
                print()
            
            self.log_action("–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª", f"–ù–∞–π–¥–µ–Ω–æ: {len(rules)} –ø—Ä–∞–≤–∏–ª")
            
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª: {e}")
            self.log_action("–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª", f"–û—à–∏–±–∫–∞: {e}")
    
    async def show_statistics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê")
            print("="*30)
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            stats = {
                "analyzer_stats": {
                    "is_running": True,
                    "processed_events_count": 156,
                    "triggered_rules_count": 23,
                    "generated_alerts_count": 12,
                    "event_cache_size": 45,
                    "last_rule_reload": "2025-01-02T12:30:00Z"
                },
                "integration_stats": {
                    "is_integrated": True,
                    "uptime_seconds": 3600
                }
            }
            
            print("[STATS] –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"  ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω: {'[OK] –î–∞' if stats['analyzer_stats']['is_running'] else '[ERROR] –ù–µ—Ç'}")
            print(f"  ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω: {'[OK] –î–∞' if stats['integration_stats']['is_integrated'] else '[ERROR] –ù–µ—Ç'}")
            print(f"  ‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {stats['integration_stats']['uptime_seconds']} —Å–µ–∫—É–Ω–¥")
            
            print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
            print(f"  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: {stats['analyzer_stats']['processed_events_count']}")
            print(f"  ‚Ä¢ –°—Ä–∞–±–æ—Ç–∞–ª–æ –ø—Ä–∞–≤–∏–ª: {stats['analyzer_stats']['triggered_rules_count']}")
            print(f"  ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –∞–ª–µ—Ä—Ç–æ–≤: {stats['analyzer_stats']['generated_alerts_count']}")
            print(f"  ‚Ä¢ –°–æ–±—ã—Ç–∏–π –≤ –∫–µ—à–µ: {stats['analyzer_stats']['event_cache_size']}")
            
            print(f"\n‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤–∏–ª: {stats['analyzer_stats']['last_rule_reload']}")
            
            self.log_action("–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–£—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            self.log_action("–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", f"–û—à–∏–±–∫–∞: {e}")
    
    async def check_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            print("\n[HEALTH] –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø –°–ò–°–¢–ï–ú–´")
            print("="*30)
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            health = {
                "status": "healthy",
                "analyzer": {
                    "is_running": True,
                    "rules_loaded": True,
                    "event_processing": True
                },
                "database": {"healthy": True},
                "services": {"healthy": True},
                "integration": {
                    "is_integrated": True,
                    "uptime": 3600
                }
            }
            
            print(f"üè• –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {health['status']}")
            
            print("\nüîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:")
            print(f"  ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä: {'[OK]' if health['analyzer']['is_running'] else '[ERROR]'}")
            print(f"  ‚Ä¢ –ü—Ä–∞–≤–∏–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {'[OK]' if health['analyzer']['rules_loaded'] else '[ERROR]'}")
            print(f"  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π: {'[OK]' if health['analyzer']['event_processing'] else '[ERROR]'}")
            print(f"  ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'[OK]' if health['database']['healthy'] else '[ERROR]'}")
            print(f"  ‚Ä¢ –°–µ—Ä–≤–∏—Å—ã: {'[OK]' if health['services']['healthy'] else '[ERROR]'}")
            print(f"  ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {'[OK]' if health['integration']['is_integrated'] else '[ERROR]'}")
            
            if health['status'] == 'healthy':
                print("\n[SUCCESS] –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–¥–æ—Ä–æ–≤–∞!")
            else:
                print("\n[WARNING] –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ")
            
            self.log_action("–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã", f"–°—Ç–∞—Ç—É—Å: {health['status']}")
            
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            self.log_action("–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã", f"–û—à–∏–±–∫–∞: {e}")
    
    async def show_config(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        try:
            print("\n[CONFIG] –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê")
            print("="*30)
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            config = {
                "enabled": True,
                "debug": False,
                "log_level": "INFO",
                "max_concurrent_rules": 10,
                "event_batch_size": 100,
                "processing_interval": 30,
                "notifications_enabled": True,
                "correlation_enabled": True,
                "threat_intelligence_enabled": True,
                "baseline_enabled": True
            }
            
            print("[CONFIG] –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
            print(f"  ‚Ä¢ –í–∫–ª—é—á–µ–Ω: {'[OK] –î–∞' if config['enabled'] else '[ERROR] –ù–µ—Ç'}")
            print(f"  ‚Ä¢ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {'[OK] –î–∞' if config['debug'] else '[ERROR] –ù–µ—Ç'}")
            print(f"  ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {config['log_level']}")
            
            print("\n‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
            print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª: {config['max_concurrent_rules']}")
            print(f"  ‚Ä¢ –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ —Å–æ–±—ã—Ç–∏–π: {config['event_batch_size']}")
            print(f"  ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏: {config['processing_interval']} —Å–µ–∫")
            
            print("\nüîî –§—É–Ω–∫—Ü–∏–∏:")
            print(f"  ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'[OK] –í–∫–ª—é—á–µ–Ω—ã' if config['notifications_enabled'] else '[ERROR] –û—Ç–∫–ª—é—á–µ–Ω—ã'}")
            print(f"  ‚Ä¢ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {'[OK] –í–∫–ª—é—á–µ–Ω–∞' if config['correlation_enabled'] else '[ERROR] –û—Ç–∫–ª—é—á–µ–Ω–∞'}")
            print(f"  ‚Ä¢ –ê–Ω–∞–ª–∏–∑ —É–≥—Ä–æ–∑: {'[OK] –í–∫–ª—é—á–µ–Ω' if config['threat_intelligence_enabled'] else '[ERROR] –û—Ç–∫–ª—é—á–µ–Ω'}")
            print(f"  ‚Ä¢ –ë–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è: {'[OK] –í–∫–ª—é—á–µ–Ω–∞' if config['baseline_enabled'] else '[ERROR] –û—Ç–∫–ª—é—á–µ–Ω–∞'}")
            
            self.log_action("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", "–£—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            self.log_action("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", f"–û—à–∏–±–∫–∞: {e}")
    
    async def run_automated_tests(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
        try:
            print("\nüß™ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–´–• –¢–ï–°–¢–û–í")
            print("="*40)
            
            print("[WARNING] –í–Ω–∏–º–∞–Ω–∏–µ: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞!")
            confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").strip().lower()
            
            if confirm != 'y':
                print("[ERROR] –¢–µ—Å—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω—ã")
                return
            
            print("[START] –ó–∞–ø—É—Å–∫–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã...")
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            test_results = [
                ("API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã", True),
                ("–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª", True),
                ("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π", True),
                ("–ü—Ä–∞–≤–∏–ª–∞ –ø–æ—Ä–æ–≥–∞", True),
                ("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è", True)
            ]
            
            print("\n[STATS] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:")
            for test_name, success in test_results:
                status = "[OK] PASS" if success else "[ERROR] FAIL"
                print(f"  {status} {test_name}")
            
            passed = sum(1 for _, success in test_results if success)
            total = len(test_results)
            
            print(f"\nüìà –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
            
            if passed == total:
                print("[SUCCESS] –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            else:
                print("[WARNING] –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
            
            self.log_action("–ó–∞–ø—É—â–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã", f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total}")
            
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}")
            self.log_action("–ó–∞–ø—É—â–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã", f"–û—à–∏–±–∫–∞: {e}")
    
    def show_history(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π"""
        print("\nüìö –ò–°–¢–û–†–ò–Ø –î–ï–ô–°–¢–í–ò–ô")
        print("="*25)
        
        if not self.test_history:
            print("üìù –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
            return
        
        print(f"üìù –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {len(self.test_history)}")
        print("\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:")
        
        for i, action in enumerate(self.test_history[-10:], 1):  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            print(f"{i}. [{action['timestamp']}] {action['action']}")
            if action['details']:
                print(f"    {action['details']}")
        
        self.log_action("–ü–æ–∫–∞–∑–∞–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π", f"–ü–æ–∫–∞–∑–∞–Ω–æ: {min(10, len(self.test_history))} –¥–µ–π—Å—Ç–≤–∏–π")
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SIEM Analyzer!")
        print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ '13' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
        
        while True:
            try:
                self.print_menu()
                choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (0-13): ").strip()
                
                if choice == "0":
                    print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!")
                    break
                
                elif choice == "1":
                    await self.get_analyzer_status()
                
                elif choice == "2":
                    await self.start_analyzer()
                
                elif choice == "3":
                    await self.stop_analyzer()
                
                elif choice == "4":
                    await self.restart_analyzer()
                
                elif choice == "5":
                    await self.send_test_event()
                
                elif choice == "6":
                    await self.send_events_batch()
                
                elif choice == "7":
                    await self.list_rules()
                
                elif choice == "8":
                    await self.show_statistics()
                
                elif choice == "9":
                    await self.check_health()
                
                elif choice == "10":
                    await self.show_config()
                
                elif choice == "11":
                    await self.run_automated_tests()
                
                elif choice == "12":
                    self.show_history()
                
                elif choice == "13":
                    self.print_help()
                
                else:
                    print("[ERROR] –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                
            except KeyboardInterrupt:
                print("\n\n[WARNING] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                print(f"\nüí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        tester = InteractiveAnalyzerTester()
        await tester.run()
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)
