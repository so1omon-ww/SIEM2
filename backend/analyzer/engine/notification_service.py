"""
Notification Service - –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è SIEM —Å–∏—Å—Ç–µ–º—ã

–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
- –ê–≥–µ–Ω—Ç–∞–º –æ –Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–∞—Ö
- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö
- –í–Ω–µ—à–Ω–∏–º —Å–∏—Å—Ç–µ–º–∞–º —á–µ—Ä–µ–∑ webhooks
- –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
"""

from __future__ import annotations
from dataclasses import dataclass, field
from datetime import datetime, timezone
from enum import Enum
from typing import Any, Dict, List, Optional, Union
import asyncio
import json
import logging
import os
from pathlib import Path

try:
    import yaml
except ImportError:
    yaml = None

try:
    import aiohttp
except ImportError:
    aiohttp = None

try:
    import smtplib
    from email.mime.text import MIMEText
    from email.mime.multipart import MIMEMultipart
except ImportError:
    smtplib = None


class NotificationType(str, Enum):
    """–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    ALERT = "alert"                    # –ù–æ–≤—ã–π –∞–ª–µ—Ä—Ç
    THREAT = "threat"                  # –£–≥—Ä–æ–∑–∞
    ANOMALY = "anomaly"                # –ê–Ω–æ–º–∞–ª–∏—è
    SYSTEM = "system"                  # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    MAINTENANCE = "maintenance"         # –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
    INFO = "info"                      # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è


class NotificationPriority(str, Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    LOW = "low"
    NORMAL = "normal"
    HIGH = "high"
    URGENT = "urgent"
    CRITICAL = "critical"


class NotificationChannel(str, Enum):
    """–ö–∞–Ω–∞–ª—ã –¥–æ—Å—Ç–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    AGENT = "agent"                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
    EMAIL = "email"                    # Email
    WEBHOOK = "webhook"                # HTTP webhook
    SLACK = "slack"                    # Slack
    TELEGRAM = "telegram"              # Telegram
    LOG = "log"                        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    DATABASE = "database"              # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î


@dataclass
class NotificationRecipient:
    """–ü–æ–ª—É—á–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    id: str
    type: str  # agent, email, webhook, etc.
    address: str  # email, URL, agent_id, etc.
    name: str = ""
    enabled: bool = True
    parameters: Dict[str, Any] = field(default_factory=dict)


@dataclass
class Notification:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    id: str
    type: NotificationType
    priority: NotificationPriority
    title: str
    message: str
    data: Dict[str, Any] = field(default_factory=dict)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    source: str = "analyzer"
    category: str = "general"
    tags: List[str] = field(default_factory=list)
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at: datetime = field(default_factory=lambda: datetime.now(timezone.utc))
    sent_at: Optional[datetime] = None
    delivered_at: Optional[datetime] = None
    
    # –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    status: str = "pending"  # pending, sent, delivered, failed
    retry_count: int = 0
    max_retries: int = 3
    
    # –ü–æ–ª—É—á–∞—Ç–µ–ª–∏
    recipients: List[NotificationRecipient] = field(default_factory=list)
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'id': self.id,
            'type': self.type.value,
            'priority': self.priority.value,
            'title': self.title,
            'message': self.message,
            'data': self.data,
            'source': self.source,
            'category': self.category,
            'tags': self.tags,
            'created_at': self.created_at.isoformat(),
            'sent_at': self.sent_at.isoformat() if self.sent_at else None,
            'delivered_at': self.delivered_at.isoformat() if self.delivered_at else None,
            'status': self.status,
            'retry_count': self.retry_count,
            'max_retries': self.max_retries,
            'recipients': [
                {
                    'id': r.id,
                    'type': r.type,
                    'address': r.address,
                    'name': r.name,
                    'enabled': r.enabled,
                    'parameters': r.parameters
                } for r in self.recipients
            ]
        }


class NotificationTemplate:
    """–®–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    
    def __init__(self, name: str, template: str, variables: List[str] = None):
        self.name = name
        self.template = template
        self.variables = variables or []
    
    def render(self, **kwargs) -> str:
        """–†–µ–Ω–¥–µ—Ä–∏—Ç —à–∞–±–ª–æ–Ω —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏"""
        try:
            return self.template.format(**kwargs)
        except KeyError as e:
            missing_var = str(e).strip("'")
            return f"Template error: missing variable {missing_var}"
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'NotificationTemplate':
        """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        return cls(
            name=data['name'],
            template=data['template'],
            variables=data.get('variables', [])
        )


class NotificationService:
    """–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, config=None):
        self.logger = logging.getLogger("notification_service")
        self.config = self._load_config_from_object(config) if config else self._load_config()
        self.templates = self._load_templates()
        self.recipients = self._load_recipients()
        self.delivery_queue = asyncio.Queue()
        self.is_running = False
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'sent': 0,
            'delivered': 0,
            'failed': 0,
            'total': 0
        }
    
    def _load_config(self, config_path: Optional[str] = None) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        default_config = {
            'retry_delay': 5,  # —Å–µ–∫—É–Ω–¥—ã
            'max_retries': 3,
            'batch_size': 10,
            'delivery_timeout': 30,
            'enable_logging': True,
            'enable_database': True,
            'channels': {
                'agent': {'enabled': True},
                'email': {'enabled': False},
                'webhook': {'enabled': False},
                'slack': {'enabled': False},
                'telegram': {'enabled': False}
            }
        }
        
        if config_path and Path(config_path).exists():
            try:
                with open(config_path, 'r', encoding='utf-8') as f:
                    if yaml:
                        user_config = yaml.safe_load(f) or {}
                    else:
                        user_config = json.load(f)
                    default_config.update(user_config)
            except Exception as e:
                self.logger.error(f"Failed to load config: {e}")
        
        return default_config
    
    def _load_config_from_object(self, config) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if hasattr(config, '__dict__'):
            return config.__dict__
        elif isinstance(config, dict):
            return config
        else:
            return {}
    
    def _load_templates(self) -> Dict[str, NotificationTemplate]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        templates = {}
        
        # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        builtin_templates = {
            'alert_new': NotificationTemplate(
                name='alert_new',
                template='[ALERT] New alert: {title}\n\n{description}\n\nSource: {source}\nSeverity: {severity}',
                variables=['title', 'description', 'source', 'severity']
            ),
            'threat_detected': NotificationTemplate(
                name='threat_detected',
                template='[WARNING] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É–≥—Ä–æ–∑–∞!\n\n{description}\n\nIP: {ip}\n–ü–æ—Ä—Ç: {port}\n–ü—Ä–æ—Ç–æ–∫–æ–ª: {protocol}',
                variables=['description', 'ip', 'port', 'protocol']
            ),
            'anomaly_detected': NotificationTemplate(
                name='anomaly_detected',
                template='üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–Ω–æ–º–∞–ª–∏—è\n\n{description}\n\n–ó–Ω–∞—á–µ–Ω–∏–µ: {value}\n–ü–æ—Ä–æ–≥: {threshold}',
                variables=['description', 'value', 'threshold']
            ),
            'system_event': NotificationTemplate(
                name='system_event',
                template='[INFO] –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ\n\n{message}\n\n–ö–æ–º–ø–æ–Ω–µ–Ω—Ç: {component}\n–°—Ç–∞—Ç—É—Å: {status}',
                variables=['message', 'component', 'status']
            )
        }
        
        templates.update(builtin_templates)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã
        templates_dir = Path(__file__).parent.parent / "templates"
        if templates_dir.exists():
            for template_file in templates_dir.glob("*.yaml"):
                try:
                    if yaml:
                        with open(template_file, 'r', encoding='utf-8') as f:
                            template_data = yaml.safe_load(f)
                            if isinstance(template_data, dict):
                                template = NotificationTemplate.from_dict(template_data)
                                templates[template.name] = template
                except Exception as e:
                    self.logger.error(f"Failed to load template {template_file}: {e}")
        
        return templates
    
    def _load_recipients(self) -> List[NotificationRecipient]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        recipients = []
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if 'recipients' in self.config:
            for recipient_data in self.config['recipients']:
                try:
                    recipient = NotificationRecipient(**recipient_data)
                    recipients.append(recipient)
                except Exception as e:
                    self.logger.error(f"Failed to load recipient: {e}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
        recipients_file = Path(__file__).parent.parent / "recipients.yaml"
        if recipients_file.exists() and yaml:
            try:
                with open(recipients_file, 'r', encoding='utf-8') as f:
                    recipients_data = yaml.safe_load(f) or {}
                    for recipient_data in recipients_data.get('recipients', []):
                        try:
                            recipient = NotificationRecipient(**recipient_data)
                            recipients.append(recipient)
                        except Exception as e:
                            self.logger.error(f"Failed to load recipient from file: {e}")
            except Exception as e:
                self.logger.error(f"Failed to load recipients file: {e}")
        
        return recipients
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if self.is_running:
            return
        
        self.is_running = True
        self.logger.info("Notification service started")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏
        asyncio.create_task(self._delivery_worker())
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.is_running = False
        self.logger.info("Notification service stopped")
    
    async def send_notification(
        self,
        notification_type: NotificationType,
        priority: NotificationPriority,
        title: str,
        message: str,
        data: Dict[str, Any] = None,
        recipients: List[str] = None,
        template: str = None,
        **kwargs
    ) -> str:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        notification_id = f"{notification_type.value}_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{hash(title)}"
        
        # –†–µ–Ω–¥–µ—Ä–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞
        if template and template in self.templates:
            template_obj = self.templates[template]
            message = template_obj.render(**kwargs)
        
        # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification = Notification(
            id=notification_id,
            type=notification_type,
            priority=priority,
            title=title,
            message=message,
            data=data or {},
            **kwargs
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        if recipients:
            for recipient_id in recipients:
                recipient = self._get_recipient(recipient_id)
                if recipient:
                    notification.recipients.append(recipient)
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            notification.recipients.extend([r for r in self.recipients if r.enabled])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–æ—Å—Ç–∞–≤–∫–∏
        await self.delivery_queue.put(notification)
        self.stats['total'] += 1
        
        self.logger.info(f"Notification queued: {notification_id} - {title}")
        return notification_id
    
    def _get_recipient(self, recipient_id: str) -> Optional[NotificationRecipient]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ ID"""
        for recipient in self.recipients:
            if recipient.id == recipient_id:
                return recipient
        return None
    
    async def _delivery_worker(self):
        """–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        while self.is_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                notification = await asyncio.wait_for(
                    self.delivery_queue.get(), 
                    timeout=1.0
                )
                
                # –î–æ—Å—Ç–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await self._deliver_notification(notification)
                
            except asyncio.TimeoutError:
                continue
            except Exception as e:
                self.logger.error(f"Delivery worker error: {e}")
    
    async def _deliver_notification(self, notification: Notification):
        """–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º"""
        delivery_tasks = []
        
        for recipient in notification.recipients:
            if not recipient.enabled:
                continue
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–æ—Å—Ç–∞–≤–∫–∏
            task = asyncio.create_task(
                self._deliver_to_recipient(notification, recipient)
            )
            delivery_tasks.append(task)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –¥–æ—Å—Ç–∞–≤–∫–∏
        if delivery_tasks:
            results = await asyncio.gather(*delivery_tasks, return_exceptions=True)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for i, result in enumerate(results):
                if isinstance(result, Exception):
                    self.logger.error(f"Delivery failed to {delivery_tasks[i]}: {result}")
                    notification.status = "failed"
                    self.stats['failed'] += 1
                else:
                    notification.status = "delivered"
                    self.stats['delivered'] += 1
    
    async def _deliver_to_recipient(self, notification: Notification, recipient: NotificationRecipient):
        """–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é"""
        try:
            if recipient.type == NotificationChannel.AGENT:
                await self._deliver_to_agent(notification, recipient)
            elif recipient.type == NotificationChannel.EMAIL:
                await self._deliver_to_email(notification, recipient)
            elif recipient.type == NotificationChannel.WEBHOOK:
                await self._deliver_to_webhook(notification, recipient)
            elif recipient.type == NotificationChannel.SLACK:
                await self._deliver_to_slack(notification, recipient)
            elif recipient.type == NotificationChannel.TELEGRAM:
                await self._deliver_to_telegram(notification, recipient)
            elif recipient.type == NotificationChannel.LOG:
                await self._deliver_to_log(notification, recipient)
            elif recipient.type == NotificationChannel.DATABASE:
                await self._deliver_to_database(notification, recipient)
            else:
                self.logger.warning(f"Unknown delivery channel: {recipient.type}")
                
        except Exception as e:
            self.logger.error(f"Delivery to {recipient.type} failed: {e}")
            raise
    
    async def _deliver_to_agent(self, notification: Notification, recipient: NotificationRecipient):
        """–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç—É
        # –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ WebSocket, HTTP API –∏–ª–∏ –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π
        
        agent_id = recipient.address
        notification_data = {
            'type': 'notification',
            'notification': notification.to_dict(),
            'timestamp': datetime.now(timezone.utc).isoformat()
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        self.logger.info(f"Notification sent to agent {agent_id}: {notification.title}")
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∞–≥–µ–Ω—Ç—É
        # await self._send_to_agent(agent_id, notification_data)
    
    async def _deliver_to_email(self, notification: Notification, recipient: NotificationRecipient):
        """–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ email"""
        if not smtplib:
            raise RuntimeError("SMTP support not available")
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É email
        self.logger.info(f"Email notification sent to {recipient.address}")
    
    async def _deliver_to_webhook(self, notification: Notification, recipient: NotificationRecipient):
        """–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ webhook"""
        if not aiohttp:
            raise RuntimeError("aiohttp support not available")
        
        webhook_url = recipient.address
        notification_data = notification.to_dict()
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    webhook_url,
                    json=notification_data,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    if response.status >= 400:
                        raise Exception(f"Webhook returned status {response.status}")
                    
                    self.logger.info(f"Webhook notification sent to {webhook_url}")
                    
        except Exception as e:
            self.logger.error(f"Webhook delivery failed: {e}")
            raise
    
    async def _deliver_to_slack(self, notification: Notification, recipient: NotificationRecipient):
        """–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Slack"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–æ Slack
        self.logger.info(f"Slack notification sent to {recipient.address}")
    
    async def _deliver_to_telegram(self, notification: Notification, recipient: NotificationRecipient):
        """–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Telegram
        self.logger.info(f"Telegram notification sent to {recipient.address}")
    
    async def _deliver_to_log(self, notification: Notification, recipient: NotificationRecipient):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        log_level = getattr(logging, notification.priority.upper(), logging.INFO)
        self.logger.log(
            log_level,
            f"NOTIFICATION [{notification.type.value.upper()}] {notification.title}: {notification.message}"
        )
    
    async def _deliver_to_database(self, notification: Notification, recipient: NotificationRecipient):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        self.logger.info(f"Notification saved to database: {notification.id}")
    
    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–∏—Å–∞"""
        return {
            **self.stats,
            'queue_size': self.delivery_queue.qsize(),
            'is_running': self.is_running,
            'recipients_count': len(self.recipients),
            'templates_count': len(self.templates)
        }
    
    def add_recipient(self, recipient: NotificationRecipient):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è"""
        self.recipients.append(recipient)
        self.logger.info(f"Added recipient: {recipient.id} ({recipient.type})")
    
    def remove_recipient(self, recipient_id: str):
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è"""
        self.recipients = [r for r in self.recipients if r.id != recipient_id]
        self.logger.info(f"Removed recipient: {recipient_id}")
    
    def add_template(self, template: NotificationTemplate):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω"""
        self.templates[template.name] = template
        self.logger.info(f"Added template: {template.name}")
    
    def remove_template(self, template_name: str):
        """–£–¥–∞–ª—è–µ—Ç —à–∞–±–ª–æ–Ω"""
        if template_name in self.templates:
            del self.templates[template_name]
            self.logger.info(f"Removed template: {template_name}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
notification_service = NotificationService()


async def send_notification(
    notification_type: NotificationType,
    priority: NotificationPriority,
    title: str,
    message: str,
    **kwargs
) -> str:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    return await notification_service.send_notification(
        notification_type=notification_type,
        priority=priority,
        title=title,
        message=message,
        **kwargs
    )


async def send_alert_notification(
    alert_id: int,
    title: str,
    description: str,
    severity: str,
    source: str,
    **kwargs
) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∞–ª–µ—Ä—Ç–µ"""
    return await send_notification(
        notification_type=NotificationType.ALERT,
        priority=NotificationPriority.HIGH if severity in ['high', 'critical'] else NotificationPriority.NORMAL,
        title=f"[ALERT] {title}",
        message=description,
        template='alert_new',
        alert_id=alert_id,
        severity=severity,
        source=source,
        **kwargs
    )


async def send_threat_notification(
    threat_type: str,
    description: str,
    ip: str = None,
    port: int = None,
    protocol: str = None,
    **kwargs
) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–≥—Ä–æ–∑–µ"""
    return await send_notification(
        notification_type=NotificationType.THREAT,
        priority=NotificationPriority.CRITICAL,
        title=f"[WARNING] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É–≥—Ä–æ–∑–∞: {threat_type}",
        message=description,
        template='threat_detected',
        threat_type=threat_type,
        ip=ip,
        port=port,
        protocol=protocol,
        **kwargs
    )
