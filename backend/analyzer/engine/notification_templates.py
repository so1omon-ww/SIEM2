"""
–®–∞–±–ª–æ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞
"""

from typing import Dict, Any, Optional
from dataclasses import dataclass
from enum import Enum


class TemplateType(Enum):
    """–¢–∏–ø—ã —à–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    THREAT_DETECTED = "threat_detected"
    ANOMALY_DETECTED = "anomaly_detected"
    CRITICAL_PROCESS = "critical_process"
    SUSPICIOUS_NETWORK = "suspicious_network"
    AUTH_FAILURE = "auth_failure"
    USER_ANOMALY = "user_anomaly"
    PORT_SCAN = "port_scan"
    BRUTE_FORCE = "brute_force"
    LATERAL_MOVEMENT = "lateral_movement"
    GENERAL_ALERT = "general_alert"


@dataclass
class NotificationTemplate:
    """–®–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    name: str
    title_template: str
    message_template: str
    priority: int = 3
    icon: str = "üîî"
    color: str = "default"
    channels: list = None
    
    def __post_init__(self):
        if self.channels is None:
            self.channels = ["agent", "log"]


class NotificationTemplateManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —à–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self._templates: Dict[str, NotificationTemplate] = {}
        self._load_default_templates()
    
    def _load_default_templates(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
        default_templates = [
            NotificationTemplate(
                name="threat_detected",
                title_template="Threat detected",
                message_template="–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É–≥—Ä–æ–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {description}",
                priority=1,
                icon="[ALERT]",
                color="red",
                channels=["agent", "email", "webhook", "log"]
            ),
            
            NotificationTemplate(
                name="anomaly_detected",
                title_template="[WARNING] –ê–Ω–æ–º–∞–ª–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞",
                message_template="–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–Ω–æ–º–∞–ª–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ: {description}",
                priority=2,
                icon="[WARNING]",
                color="yellow",
                channels=["agent", "email", "log"]
            ),
            
            NotificationTemplate(
                name="critical_process",
                title_template="Critical process",
                message_template="–ó–∞–ø—É—â–µ–Ω –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å: {process_name} —Å IP {src_ip}",
                priority=1,
                icon="[ALERT]",
                color="red",
                channels=["agent", "email", "webhook", "slack", "log"]
            ),
            
            NotificationTemplate(
                name="suspicious_network",
                title_template="[WARNING] –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Ç—å",
                message_template="–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Ç–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {description}",
                priority=2,
                icon="[WARNING]",
                color="orange",
                channels=["agent", "email", "log"]
            ),
            
            NotificationTemplate(
                name="auth_failure",
                title_template="üîí –ù–µ—É–¥–∞—á–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
                message_template="–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞: {description}",
                priority=2,
                icon="üîí",
                color="orange",
                channels=["agent", "email", "log"]
            ),
            
            NotificationTemplate(
                name="user_anomaly",
                title_template="üë§ –ê–Ω–æ–º–∞–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                message_template="–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–Ω–æ–º–∞–ª–∏—è –≤ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {description}",
                priority=1,
                icon="üë§",
                color="red",
                channels=["agent", "email", "webhook", "log"]
            ),
            
            NotificationTemplate(
                name="port_scan",
                title_template="üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤",
                message_template="–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ —Å {src_ip} –Ω–∞ {dst_ip}",
                priority=2,
                icon="üîç",
                color="orange",
                channels=["agent", "email", "log"]
            ),
            
            NotificationTemplate(
                name="brute_force",
                title_template="üí• –ë—Ä—É—Ç—Ñ–æ—Ä—Å –∞—Ç–∞–∫–∞",
                message_template="–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±—Ä—É—Ç—Ñ–æ—Ä—Å –∞—Ç–∞–∫–∞: {description}",
                priority=1,
                icon="üí•",
                color="red",
                channels=["agent", "email", "webhook", "slack", "log"]
            ),
            
            NotificationTemplate(
                name="lateral_movement",
                title_template="üîÑ –õ–∞—Ç–µ—Ä–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ",
                message_template="–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏ –ª–∞—Ç–µ—Ä–∞–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è: {description}",
                priority=1,
                icon="üîÑ",
                color="red",
                channels=["agent", "email", "webhook", "log"]
            ),
            
            NotificationTemplate(
                name="general_alert",
                title_template="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
                message_template="{message}",
                priority=3,
                icon="üîî",
                color="blue",
                channels=["agent", "log"]
            )
        ]
        
        for template in default_templates:
            self._templates[template.name] = template
    
    def get_template(self, name: str) -> Optional[NotificationTemplate]:
        """–ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ –∏–º–µ–Ω–∏"""
        return self._templates.get(name)
    
    def add_template(self, template: NotificationTemplate):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω"""
        self._templates[template.name] = template
    
    def remove_template(self, name: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω"""
        if name in self._templates:
            del self._templates[name]
            return True
        return False
    
    def list_templates(self) -> list:
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
        return list(self._templates.keys())
    
    def render_template(self, template_name: str, context: Dict[str, Any]) -> Optional[Dict[str, str]]:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        template = self.get_template(template_name)
        if not template:
            return None
        
        try:
            title = template.title_template.format(**context)
            message = template.message_template.format(**context)
            
            return {
                "title": title,
                "message": message,
                "priority": template.priority,
                "icon": template.icon,
                "color": template.color,
                "channels": template.channels
            }
        except KeyError as e:
            # –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            fallback_context = {
                "description": context.get("description", "–°–æ–±—ã—Ç–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"),
                "message": context.get("message", "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"),
                "src_ip": context.get("src_ip", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                "dst_ip": context.get("dst_ip", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                "process_name": context.get("process_name", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                "username": context.get("username", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                "count": context.get("count", "–Ω–µ—Å–∫–æ–ª—å–∫–æ"),
                **context
            }
            
            try:
                title = template.title_template.format(**fallback_context)
                message = template.message_template.format(**fallback_context)
                
                return {
                    "title": title,
                    "message": message,
                    "priority": template.priority,
                    "icon": template.icon,
                    "color": template.color,
                    "channels": template.channels
                }
            except:
                # –ï—Å–ª–∏ –∏ fallback –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                return {
                    "title": f"{template.icon} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
                    "message": f"–°–æ–±—ã—Ç–∏–µ: {context.get('event_type', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
                    "priority": template.priority,
                    "icon": template.icon,
                    "color": template.color,
                    "channels": template.channels
                }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤
template_manager = NotificationTemplateManager()
